name: EC2 Runner
#
# Environment variables (can be set at org/repo level):
#   AWS_ROLE - AWS role ARN for EC2 operations (required if not passed as input)
#   EC2_IMAGE_ID - Default AMI ID
#   EC2_INSTANCE_TYPE - Default instance type
#   EC2_HOME_DIR - Default home directory
#   EC2_KEY_NAME - Default SSH key pair name
#   EC2_SECURITY_GROUP_ID - Default security group ID
#   SSH_PUBKEY - Default SSH public key to add to instances
#
# Priority: inputs > vars > defaults

on:
  workflow_call:
    secrets:
      GH_SA_TOKEN:
        description: "GitHub token with permissions to manage self-hosted runners"
        required: true
    inputs:
      aws_role:
        description: "AWS role ARN to assume for EC2 operations (falls back to vars.AWS_ROLE)"
        required: false
        type: string
      ec2_image_id:
        description: "AWS AMI ID to use (falls back to vars.EC2_IMAGE_ID)"
        required: false
        type: string
        default: "ami-00096836009b16a22" # Deep Learning OSS Nvidia Driver AMI GPU PyTorch
      ec2_instance_type:
        description: "AWS instance type (falls back to vars.EC2_INSTANCE_TYPE)"
        required: false
        type: string
        default: "g4dn.xlarge"
      ec2_home_dir:
        description: "Home directory on the AWS instance (falls back to vars.EC2_HOME_DIR)"
        required: false
        type: string
        default: "/home/ubuntu"
      ec2_key_name:
        description: "Name of an EC2 key pair to use for SSH access (falls back to vars.EC2_KEY_NAME)"
        required: false
        type: string
      ec2_security_group_id:
        description: "AWS security group ID (falls back to vars.EC2_SECURITY_GROUP_ID)"
        required: false
        type: string
      ssh_pubkey:
        description: "SSH public key to add to authorized_keys (falls back to vars.SSH_PUBKEY)"
        required: false
        type: string
    outputs:
      instance:
        description: "Instance ID for runs-on"
        value: ${{ jobs.start-ec2-runner.outputs.instance }}

permissions:
  id-token: write # Required for AWS OIDC

jobs:
  start-ec2-runner:
    runs-on: ubuntu-latest
    outputs:
      instance: ${{ steps.aws-start.outputs.label }}
    steps:
      - name: Check AWS_ROLE configuration
        run: |
          if [ -z "${{ inputs.aws_role || vars.AWS_ROLE }}" ]; then
            echo "ERROR: AWS_ROLE must be provided either as an input or as a repository/organization variable"
            echo "Please set 'aws_role' input or 'AWS_ROLE' variable"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role || vars.AWS_ROLE }}
          role-session-name: github-actions-session
          aws-region: us-east-1

      - name: 'Extract workflow name and number (for instance "Name" tag)'
        id: names
        run: |
          # Extract filename from workflow_ref (e.g., "owner/repo/.github/workflows/test-gpu.yml@ref" -> "test-gpu")
          if [ -n "${{ github.workflow_ref }}" ]; then
            WORKFLOW_FILE=$(echo "${{ github.workflow_ref }}" | sed 's/.*\/\([^@]*\)@.*/\1/' | sed 's/\.yml$//' | sed 's/\.yaml$//')
          else
            # Fallback to workflow name if ref not available
            WORKFLOW_FILE="${{ github.workflow }}"
          fi
          echo "filename=$WORKFLOW_FILE" >> $GITHUB_OUTPUT

          # Extract repository basename (e.g., "Open-Athena/ec2-runner-demo" -> "ec2-runner-demo")
          REPO_BASENAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "repo_basename=$REPO_BASENAME" >> $GITHUB_OUTPUT

      - name: Create cloud runner
        id: aws-start
        uses: Open-Athena/start-aws-gha-runner@rw/chown
        with:
          aws_image_id: ${{ inputs.ec2_image_id || vars.EC2_IMAGE_ID }}
          aws_instance_type: ${{ inputs.ec2_instance_type || vars.EC2_INSTANCE_TYPE }}
          aws_home_dir: ${{ inputs.ec2_home_dir || vars.EC2_HOME_DIR }}
          aws_key_name: ${{ inputs.ec2_key_name || vars.EC2_KEY_NAME }}
          aws_security_group_id: ${{ inputs.ec2_security_group_id || vars.EC2_SECURITY_GROUP_ID }}
          aws_tags: |
            [
              { "Key": "Name", "Value": "${{ steps.names.outputs.repo_basename }}/${{ steps.names.outputs.filename }}#${{ github.run_number }}" },
              { "Key": "workflow", "Value": "${{ github.workflow }}" },
              { "Key": "repository", "Value": "${{ github.repository }}" },
              { "Key": "gha_url", "Value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" }
            ]
          aws_userdata: |
            # Instance is already configured to terminate on shutdown via launch parameter

            # Create log file for debugging
            exec > >(tee -a /var/log/runner-setup.log)
            exec 2>&1
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Starting runner setup userdata script"

            # Configure SSH access
            # Get the home directory for the default user
            case "$(id -un 2>/dev/null)" in
              ec2-user)
                USER_HOME="/home/ec2-user"
                DEFAULT_USER="ec2-user"
                ;;
              ubuntu)
                USER_HOME="/home/ubuntu"
                DEFAULT_USER="ubuntu"
                ;;
              *)
                USER_HOME="/root"
                DEFAULT_USER="root"
                ;;
            esac

            # Create .ssh directory if it doesn't exist
            mkdir -p "$USER_HOME/.ssh"
            chmod 700 "$USER_HOME/.ssh"
            touch "$USER_HOME/.ssh/authorized_keys"
            chmod 600 "$USER_HOME/.ssh/authorized_keys"

            # Add default SSH public key from variable if provided
            if [ -n "${{ vars.SSH_PUBKEY }}" ]; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] Adding default SSH public key from variable"
              echo "${{ vars.SSH_PUBKEY }}" >> "$USER_HOME/.ssh/authorized_keys"
            fi

            # Add input SSH public key if provided
            if [ -n "${{ inputs.ssh_pubkey }}" ]; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] Adding SSH public key from workflow input"
              echo "${{ inputs.ssh_pubkey }}" >> "$USER_HOME/.ssh/authorized_keys"
            fi

            # Fix ownership
            chown -R "$DEFAULT_USER:$DEFAULT_USER" "$USER_HOME/.ssh"

            if [ -s "$USER_HOME/.ssh/authorized_keys" ]; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] SSH access configured with $(wc -l < $USER_HOME/.ssh/authorized_keys) key(s)"
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] No SSH keys configured"
            fi

            # Create runner hook script for auto-termination
            cat > /opt/runner-termination-hook.sh << 'EOF'
            #!/bin/bash

            # Log function
            log() {
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-termination-hook.log
            }

            log "GitHub Runner termination hook triggered"
            log "Job Name: ${GITHUB_JOB}"
            log "Repository: ${GITHUB_REPOSITORY}"
            log "Run ID: ${GITHUB_RUN_ID}"
            log "Runner Name: ${RUNNER_NAME}"

            # Give a brief moment for any cleanup
            sleep 5

            log "Initiating instance termination..."

            # Shutdown instance (will terminate due to launch configuration)
            shutdown -h now
            EOF

            chmod +x /opt/runner-termination-hook.sh

            # Configure runner hooks via .env file
            # Find the runner directory (it should be created by gha-runner)
            RUNNER_DIR="$USER_HOME/actions-runner"

            # Wait for runner directory to be created
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Waiting for runner directory to be created..."
            while [ ! -d "$RUNNER_DIR" ]; do
              sleep 5
            done

            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Runner directory found at $RUNNER_DIR"

            # Create .env file with hook configuration
            cat > "$RUNNER_DIR/.env" << EOF
            ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/opt/runner-termination-hook.sh
            EOF

            chown "$DEFAULT_USER:$DEFAULT_USER" "$RUNNER_DIR/.env"

            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Runner hooks configured"

            # Create a marker file to indicate userdata completion
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Userdata script completed" >> /var/log/runner-setup.log
            touch /var/run/runner-userdata-complete
        env:
          GH_PAT: ${{ secrets.GH_SA_TOKEN }}
